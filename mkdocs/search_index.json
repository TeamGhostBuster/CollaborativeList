{
    "docs": [
        {
            "location": "/",
            "text": "Collaborative Lists\n\u00b6\n\n\nOverview\n\u00b6\n\n\nLive demo\n\n\nCollaborative List API\n\n\nPM Stuff\n\u00b6\n\n\nStoryMap\n\n\nIssue&Bug Tracker/Timeline",
            "title": "Collaborative Lists"
        },
        {
            "location": "/#collaborative-lists",
            "text": "",
            "title": "Collaborative Lists"
        },
        {
            "location": "/#overview",
            "text": "Live demo  Collaborative List API",
            "title": "Overview"
        },
        {
            "location": "/#pm-stuff",
            "text": "StoryMap  Issue&Bug Tracker/Timeline",
            "title": "PM Stuff"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\u00b6\n\n\nRequirements\n\u00b6\n\n\n\n\nDocker\n\n\nDocker Compose\n\n\n\n\nSteps\n\u00b6\n\n\n\n\n\n\nClone our project from Github.\n\n\n$ git clone https://github.com/TeamGhostBuster/restful-api.git\n\n\n$ git clone https://github.com/TeamGhostBuster/CollaborativeList.git\n\n\n\n\n\n\nFor the \nrestful-api\n, if you run into any error, just try to restart the container that fails. \n\n\n$ docker-compose up -d\n\n\n\n\n\n\nFor the \nCollaborativeList\n, it can be accessed through \nhttp://localhost:3000\n by default.\n\n\n$ docker-compose up -d\n\n\n\n\n\n\nConfiguration\n\u00b6\n\n\n\n\nModify the \ndocker-compose.yml\n file under the \nCollaborativeList\n folder, set \nGOOGLE_CLIENT_ID\n environment variable to the one you obtain from Google Developer Console.\n\n\nModify the \ndocker-compose.yml\n file under the \nCollaborativeList\n folder, set \nAPI_URL\n environment able to the host where you are running the \nrestful-api\n.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/installation/#requirements",
            "text": "Docker  Docker Compose",
            "title": "Requirements"
        },
        {
            "location": "/installation/#steps",
            "text": "Clone our project from Github.  $ git clone https://github.com/TeamGhostBuster/restful-api.git  $ git clone https://github.com/TeamGhostBuster/CollaborativeList.git    For the  restful-api , if you run into any error, just try to restart the container that fails.   $ docker-compose up -d    For the  CollaborativeList , it can be accessed through  http://localhost:3000  by default.  $ docker-compose up -d",
            "title": "Steps"
        },
        {
            "location": "/installation/#configuration",
            "text": "Modify the  docker-compose.yml  file under the  CollaborativeList  folder, set  GOOGLE_CLIENT_ID  environment variable to the one you obtain from Google Developer Console.  Modify the  docker-compose.yml  file under the  CollaborativeList  folder, set  API_URL  environment able to the host where you are running the  restful-api .",
            "title": "Configuration"
        },
        {
            "location": "/requirement-document/project-overview/",
            "text": "Project Overview\n\u00b6\n\n\nCollaborative Lists\n is a project management tool for academics and their colleagues to facilitate and coordinate group study sessions. Via a web-based interface, users can save and organize external links to scholarly papers (or journal articles, videos, etc.), share them with the other members of their reading group(s), and participate in a voting system determining which of the shared articles the group will collectively study. Designed to be lightweight and user-friendly, the application can run on any modern browser with a minimum-effort installation.",
            "title": "Project Overview"
        },
        {
            "location": "/requirement-document/project-overview/#project-overview",
            "text": "Collaborative Lists  is a project management tool for academics and their colleagues to facilitate and coordinate group study sessions. Via a web-based interface, users can save and organize external links to scholarly papers (or journal articles, videos, etc.), share them with the other members of their reading group(s), and participate in a voting system determining which of the shared articles the group will collectively study. Designed to be lightweight and user-friendly, the application can run on any modern browser with a minimum-effort installation.",
            "title": "Project Overview"
        },
        {
            "location": "/requirement-document/project-glossary/",
            "text": "Collaborative List Glossary\n\u00b6\n\n\nThe following terms and definitions are to be taken into consideration for all documentation of our product, unless stated otherwise.\n\n\nThis list is not static and may be subject to alteration.\n\n\n\n\n\n\nArticle\n: An external link to a scholarly paper saved by the user; may include comments, private tags, etc.\n\n\n\n\n\n\nElection\n: The process by which the members of a group vote up or down other members' nominations; the winner of an election is then assumed to be the group consensus\n\n\n\n\n\n\nLibrary\n: A user's total collection of articles\n\n\n\n\n\n\nModerator\n: The leader of a reading group; has unique privileges relative to other group members\n\n\n\n\n\n\nNominate\n: The process of a group member suggesting an article for the group to collectively study\n\n\n\n\n\n\nReading Group\n: A collection of users where each individual can nominate articles and/or vote on others' suggestions, lead by a single moderator\n\n\n\n\n\n\nReading List\n: A subset of a user's library that contains articles selected by the user; may be named or ordered however the user wishes\n\n\n\n\n\n\nUser\n: Anybody who logs into the application with a valid account",
            "title": "Project Glossary"
        },
        {
            "location": "/requirement-document/project-glossary/#collaborative-list-glossary",
            "text": "The following terms and definitions are to be taken into consideration for all documentation of our product, unless stated otherwise.  This list is not static and may be subject to alteration.    Article : An external link to a scholarly paper saved by the user; may include comments, private tags, etc.    Election : The process by which the members of a group vote up or down other members' nominations; the winner of an election is then assumed to be the group consensus    Library : A user's total collection of articles    Moderator : The leader of a reading group; has unique privileges relative to other group members    Nominate : The process of a group member suggesting an article for the group to collectively study    Reading Group : A collection of users where each individual can nominate articles and/or vote on others' suggestions, lead by a single moderator    Reading List : A subset of a user's library that contains articles selected by the user; may be named or ordered however the user wishes    User : Anybody who logs into the application with a valid account",
            "title": "Collaborative List Glossary"
        },
        {
            "location": "/requirement-document/storyboard/",
            "text": "Storyboard\n\u00b6",
            "title": "Storyboard"
        },
        {
            "location": "/requirement-document/storyboard/#storyboard",
            "text": "",
            "title": "Storyboard"
        },
        {
            "location": "/requirement-document/user-stories/",
            "text": "User Story\n\u00b6\n\n\n1. Authentication\n\u00b6\n\n\n\n\n1.1 As a user, I can login through Oauth2 provider (Google/Facebook/Github).\n\n\nLogin button is recognizable.\n\n\nCliking the login button will direct user to the provider's page for authentication\n\n\n\n\n\n\n\n\n2. Create\n\u00b6\n\n\n\n\n2.1 As a user, I can create a reading list.\n\n\nThe reading list is displayed.\n\n\nCreating a list will lead to a form filling in the necessary information about the list.\n\n\nWhen the action is done, there should be a list object on the server.\n\n\n\n\n\n\n2.2 As a user, I can create a reading group.\n\n\nThe group is displayed.\n\n\nWhen the action is done, there should be a new group object on the server.\n\n\n\n\n\n\n2.3 As a user, I can add metadata tags to each article.\n\n\nThe tag is displayed.\n\n\nThe tag is associated with the article\n\n\n\n\n\n\n2.4 As a user, I can create reading lists for the group.\n\n\nThe list is displayed under the group.\n\n\n\n\n\n\n2.5 As a user, I can create a new article in my personal list.\n\n\nThe article is displayed in the coressponding list.\n\n\nThe article is saved into the database.\n\n\nThe article is duplicated to the ElasticSearch.\n\n\n\n\n\n\n2.5 As a user, I can create a new article in group list.\n\n\nThe article is displayed in the coressponding list.\n\n\nThe article is saved into the database.\n\n\nThe article is duplicated to the ElasticSearch.\n\n\n\n\n\n\n\n\n3. Edit\n\u00b6\n\n\n\n\n3.1 As a user, I can add description to each article.\n\n\nI can see the description.\n\n\nIt is saved to the database.\n\n\n\n\n\n\n3.2 As a user, I can comment on each article.\n\n\nI can see the comment.\n\n\nIt is saved to the database.\n\n\n\n\n\n\n3.3 As a user, I can rename lists.\n\n\nThe list name is changed.\n\n\nThe new list name is displayed.\n\n\n\n\n\n\n3.4 As a user, I can merge lists.\n\n\nThe new list is displayed\n\n\nPrevious lists are gone.\n\n\n\n\n\n\n3.5 As a user, I can partition lists.\n\n\nA new list is displayed.\n\n\nPrevious list is splited into two.\n\n\n\n\n\n\n3.6 As a user, I can copy articles from one list to another.\n\n\nA duplicated article is displayed in another list.\n\n\n\n\n\n\n3.7 As a user, I can move articles from one list to another.\n\n\nThe article is displyed in another list.\n\n\nThe article is no longer in the previous list.\n\n\n\n\n\n\n3.8 As a user, I can delete articles from lists.\n\n\nThe article is not in the list anymore.\n\n\n\n\n\n\n3.9 As a user, I can archive lists.\n\n\nThe list will not be displayed.\n\n\nUser may retrive it.\n\n\n\n\n\n\n3.10 As a user, I can retrieve archived lists.\n\n\nThe list is displayed.\n\n\n\n\n\n\n\n\n4. Share\n\u00b6\n\n\n\n\n4.1 As a user, I can grant/revoke read/write access of reading list to others.\n\n\nOthers will able/unable to read/write my list.\n\n\n\n\n\n\n4.2 As a user, I can share my reading list to a group.\n\n\nThe reading list will show up in the group's reading list.\n\n\nThe group has ownership to the new list.\n\n\n\n\n\n\n4.3 As a user, I can upvote/downvote each article once.\n\n\nIt will indicate that the vote has changed.\n\n\n\n\n\n\n4.4 As a user, I can hide my comments on articles.\n\n\nOther user cannot see my comment.\n\n\n\n\n\n\n\n\n5. Moderator\n\u00b6\n\n\n\n\n5.1 As a moderator, I can invite people to join my group.\n\n\nThe group will show up in the user's group list.\n\n\n\n\n\n\n5.2 As a moderator, I can block people in my group.\n\n\nThe user who got blocked will no longer able to take any action in the group.\n\n\n\n\n\n\n5.3 As a moderator, I can kick out people from my group.\n\n\nThe user who got kicked will lose access to the group.\n\n\n\n\n\n\n5.4 As a moderator, I can delete an article and keep people from reposting it.\n\n\nThe article I deleted cannot be posted by other user.\n\n\n\n\n\n\n5.5 As a moderator, I can set a limit on how many suggestions each person can submit\n\n\nUser cannot suggest amount of articles above the limit.\n\n\nWhen user excess the limit, the user will receive a alert.\n\n\n\n\n\n\n5.6 As a moderator, I can make someone else in the group the moderator.\n\n\nThe user will have ownership of the group.\n\n\n\n\n\n\n\n\n6. Search/Filter\n\u00b6\n\n\n\n\n6.1 As a user, I can search article by tags.\n\n\nI can see articles that match.\n\n\nI can add one of them to my own list.\n\n\n\n\n\n\n6.2 As a user, I can search article by name and description.\n\n\nI can see articles that match.\n\n\nI can add one of them to my own list.\n\n\n\n\n\n\n6.3 As a user, I can filter article by tags.\n\n\nI can see articles that match.\n\n\nI can add one of them to my own list.\n\n\n\n\n\n\n6.4 As a user, I can filter article by name and description.\n\n\nI can see articles that match.\n\n\nI can add one of them to my own list.\n\n\n\n\n\n\n6.5 As a user, I can search a group by group name.\n\n\nI can see articles that match.\n\n\nI can add one of them to my own list.\n\n\n\n\n\n\n\n\n7. Notification\n\u00b6\n\n\n\n\n7.1 As a user, I can receive voting notification whenever it changes.\n\n\nI can see a alert on my browser.\n\n\n\n\n\n\n7.2 As a user, I can receive notification when the voting end.\n\n\nI can see a alert on my browser.",
            "title": "User Story"
        },
        {
            "location": "/requirement-document/user-stories/#user-story",
            "text": "",
            "title": "User Story"
        },
        {
            "location": "/requirement-document/user-stories/#1-authentication",
            "text": "1.1 As a user, I can login through Oauth2 provider (Google/Facebook/Github).  Login button is recognizable.  Cliking the login button will direct user to the provider's page for authentication",
            "title": "1. Authentication"
        },
        {
            "location": "/requirement-document/user-stories/#2-create",
            "text": "2.1 As a user, I can create a reading list.  The reading list is displayed.  Creating a list will lead to a form filling in the necessary information about the list.  When the action is done, there should be a list object on the server.    2.2 As a user, I can create a reading group.  The group is displayed.  When the action is done, there should be a new group object on the server.    2.3 As a user, I can add metadata tags to each article.  The tag is displayed.  The tag is associated with the article    2.4 As a user, I can create reading lists for the group.  The list is displayed under the group.    2.5 As a user, I can create a new article in my personal list.  The article is displayed in the coressponding list.  The article is saved into the database.  The article is duplicated to the ElasticSearch.    2.5 As a user, I can create a new article in group list.  The article is displayed in the coressponding list.  The article is saved into the database.  The article is duplicated to the ElasticSearch.",
            "title": "2. Create"
        },
        {
            "location": "/requirement-document/user-stories/#3-edit",
            "text": "3.1 As a user, I can add description to each article.  I can see the description.  It is saved to the database.    3.2 As a user, I can comment on each article.  I can see the comment.  It is saved to the database.    3.3 As a user, I can rename lists.  The list name is changed.  The new list name is displayed.    3.4 As a user, I can merge lists.  The new list is displayed  Previous lists are gone.    3.5 As a user, I can partition lists.  A new list is displayed.  Previous list is splited into two.    3.6 As a user, I can copy articles from one list to another.  A duplicated article is displayed in another list.    3.7 As a user, I can move articles from one list to another.  The article is displyed in another list.  The article is no longer in the previous list.    3.8 As a user, I can delete articles from lists.  The article is not in the list anymore.    3.9 As a user, I can archive lists.  The list will not be displayed.  User may retrive it.    3.10 As a user, I can retrieve archived lists.  The list is displayed.",
            "title": "3. Edit"
        },
        {
            "location": "/requirement-document/user-stories/#4-share",
            "text": "4.1 As a user, I can grant/revoke read/write access of reading list to others.  Others will able/unable to read/write my list.    4.2 As a user, I can share my reading list to a group.  The reading list will show up in the group's reading list.  The group has ownership to the new list.    4.3 As a user, I can upvote/downvote each article once.  It will indicate that the vote has changed.    4.4 As a user, I can hide my comments on articles.  Other user cannot see my comment.",
            "title": "4. Share"
        },
        {
            "location": "/requirement-document/user-stories/#5-moderator",
            "text": "5.1 As a moderator, I can invite people to join my group.  The group will show up in the user's group list.    5.2 As a moderator, I can block people in my group.  The user who got blocked will no longer able to take any action in the group.    5.3 As a moderator, I can kick out people from my group.  The user who got kicked will lose access to the group.    5.4 As a moderator, I can delete an article and keep people from reposting it.  The article I deleted cannot be posted by other user.    5.5 As a moderator, I can set a limit on how many suggestions each person can submit  User cannot suggest amount of articles above the limit.  When user excess the limit, the user will receive a alert.    5.6 As a moderator, I can make someone else in the group the moderator.  The user will have ownership of the group.",
            "title": "5. Moderator"
        },
        {
            "location": "/requirement-document/user-stories/#6-searchfilter",
            "text": "6.1 As a user, I can search article by tags.  I can see articles that match.  I can add one of them to my own list.    6.2 As a user, I can search article by name and description.  I can see articles that match.  I can add one of them to my own list.    6.3 As a user, I can filter article by tags.  I can see articles that match.  I can add one of them to my own list.    6.4 As a user, I can filter article by name and description.  I can see articles that match.  I can add one of them to my own list.    6.5 As a user, I can search a group by group name.  I can see articles that match.  I can add one of them to my own list.",
            "title": "6. Search/Filter"
        },
        {
            "location": "/requirement-document/user-stories/#7-notification",
            "text": "7.1 As a user, I can receive voting notification whenever it changes.  I can see a alert on my browser.    7.2 As a user, I can receive notification when the voting end.  I can see a alert on my browser.",
            "title": "7. Notification"
        },
        {
            "location": "/requirement-document/technical-resources/",
            "text": "Technical Resources\n\u00b6\n\n\nFront-end\n\u00b6\n\n\n\n\nReact\n\n\nReact Components for Elasticsearch\n\n\n\n\nBack-end\n\u00b6\n\n\n\n\nFlask\n\n\nMongoEngine\n\n\nMongoDB Schema Design\n\n\n\n\nPush Notification\n\u00b6\n\n\n\n\nOneSignal\n\n\n\n\nDeployment\n\u00b6\n\n\n\n\nDocker\n\n\nGit-Webhook",
            "title": "Technical Resources"
        },
        {
            "location": "/requirement-document/technical-resources/#technical-resources",
            "text": "",
            "title": "Technical Resources"
        },
        {
            "location": "/requirement-document/technical-resources/#front-end",
            "text": "React  React Components for Elasticsearch",
            "title": "Front-end"
        },
        {
            "location": "/requirement-document/technical-resources/#back-end",
            "text": "Flask  MongoEngine  MongoDB Schema Design",
            "title": "Back-end"
        },
        {
            "location": "/requirement-document/technical-resources/#push-notification",
            "text": "OneSignal",
            "title": "Push Notification"
        },
        {
            "location": "/requirement-document/technical-resources/#deployment",
            "text": "Docker  Git-Webhook",
            "title": "Deployment"
        },
        {
            "location": "/requirement-document/similar-products/",
            "text": "Similar Products\n\u00b6\n\n\n\n\nTrello\n\n\ndapulse",
            "title": "Similar Products"
        },
        {
            "location": "/requirement-document/similar-products/#similar-products",
            "text": "Trello  dapulse",
            "title": "Similar Products"
        },
        {
            "location": "/software-design/software-design/",
            "text": "Software Design\n\u00b6\n\n\nArchitecture Diagram\n\u00b6",
            "title": "System Overview"
        },
        {
            "location": "/software-design/software-design/#software-design",
            "text": "",
            "title": "Software Design"
        },
        {
            "location": "/software-design/software-design/#architecture-diagram",
            "text": "",
            "title": "Architecture Diagram"
        },
        {
            "location": "/software-design/detail-design/",
            "text": "Object-\u00adoriented Analysis\n\u00b6\n\n\nComponent Model\n\u00b6\n\n\n\n\nLogical Model (Back-end)\n\u00b6\n\n\n\n\nCore Dynamics Behaviours and Information Flow (Service-level)\n\u00b6",
            "title": "Detail Design"
        },
        {
            "location": "/software-design/detail-design/#object-oriented-analysis",
            "text": "",
            "title": "Object-\u00adoriented Analysis"
        },
        {
            "location": "/software-design/detail-design/#component-model",
            "text": "",
            "title": "Component Model"
        },
        {
            "location": "/software-design/detail-design/#logical-model-back-end",
            "text": "",
            "title": "Logical Model (Back-end)"
        },
        {
            "location": "/software-design/detail-design/#core-dynamics-behaviours-and-information-flow-service-level",
            "text": "",
            "title": "Core Dynamics Behaviours and Information Flow (Service-level)"
        },
        {
            "location": "/software-design/testing/",
            "text": "Testing\n\u00b6\n\n\nTest Cases (Backend)\n\u00b6\n\n\nStrategy\n\u00b6\n\n\nFor the backend, we will have another instance of software running in a isolated docker container isolated with our production environment for unit testing. The unit test runs with pytest, a Python test framework, and it can run automatically. Since the backend essentially is providing RESTful API to the client, the way we test the API is by send HTTP request to our testing server to verify responses' status code and content. By doing so, we can easily implement new feature, refactor code, or make any other changes, then test it with existing test cases.\n\n\nUsage\n\u00b6\n\n\nThe test cases is located under the \ntests\n folder, replace the access token with your own one.\n\n\n$ make \ntest\n\n\nSample Console Output\n\u00b6\n\n\n==================================================== test session starts ====================================================\nplatform linux -- Python 3.5.2, pytest-3.0.6, py-1.4.32, pluggy-0.4.0\nrootdir: /home/app, inifile:\nplugins: ordering-0.4\ncollected 6 items\n\ntest/test_list.py .\ntest/test_article.py .\ntest/test_list.py ....\n\n================================================= 6 passed in 0.32 seconds ==================================================\n\n\n\n\n\nTest Case 1\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_create_user_list\n\n\n\n\n\n\nPurpose\n\n\nVerify that user would be able to create a reading list.\n\n\n\n\n\n\nReference\n\n\nUS 2.1\n\n\n\n\n\n\n\n\nTest Case 2\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_get_user_all_lists\n\n\n\n\n\n\nPurpose\n\n\nVerify that user would be able to get his reading lists.\n\n\n\n\n\n\nReference\n\n\nUS 2.1\n\n\n\n\n\n\n\n\nTest Case 3\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_create_article_for_user\n\n\n\n\n\n\nPurpose\n\n\nVerify that user would be able to create an article under a personal list.\n\n\n\n\n\n\nReference\n\n\nUS 2.5\n \nUS 2.3\n \nUS 3.1\n\n\n\n\n\n\n\n\nTest Case 4\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_delete_article_from_list\n\n\n\n\n\n\nPurpose\n\n\nVerify that user would be able to delete an article under a personal list.\n\n\n\n\n\n\nReference\n\n\nUS 3.8\n\n\n\n\n\n\n\n\nTest Case 5\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_archive_user_list\n\n\n\n\n\n\nPurpose\n\n\nVerify that user would be able to archive a personal list.\n\n\n\n\n\n\nReference\n\n\nUS 3.9\n\n\n\n\n\n\n\n\nTest Case 6\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_retrieve_user_list\n\n\n\n\n\n\nPurpose\n\n\nVerify that user would be able to retrieve a archived personal list.\n\n\n\n\n\n\nReference\n\n\nUS 3.10\n\n\n\n\n\n\n\n\nTest Case 7\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_post_comment_to_article\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can post comment to a article\n\n\n\n\n\n\nReference\n\n\nUS 3.2\n\n\n\n\n\n\n\n\nTest Case 8\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_create_group\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can create a reading group\n\n\n\n\n\n\nReference\n\n\nUS 2.2\n\n\n\n\n\n\n\n\nTest Case 9\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_create_group_list\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can create a list in a group\n\n\n\n\n\n\nReference\n\n\nUS 2.4\n\n\n\n\n\n\n\n\nTest Case 10\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_create_article_for_group\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can create article in a group list\n\n\n\n\n\n\nReference\n\n\nUS 2.5\n\n\n\n\n\n\n\n\nTest Case 11\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_upvote_article\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can up vote article\n\n\n\n\n\n\nReference\n\n\nUS 4.3\n\n\n\n\n\n\n\n\nTest Case 12\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_downvote_article\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can down vote article\n\n\n\n\n\n\nReference\n\n\nUS 4.3\n\n\n\n\n\n\n\n\nTest Case 13\n\u00b6\n\n\n\n\n\n\n\n\nItem\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nName\n\n\ntest_user_cannot_vote_twice\n\n\n\n\n\n\nPurpose\n\n\nVerify that user can vote twice\n\n\n\n\n\n\nReference\n\n\nUS 4.3\n\n\n\n\n\n\n\n\nTest Case 14\n\u00b6\n\n\nMore tests will be added upon next release.",
            "title": "Testing"
        },
        {
            "location": "/software-design/testing/#testing",
            "text": "",
            "title": "Testing"
        },
        {
            "location": "/software-design/testing/#test-cases-backend",
            "text": "",
            "title": "Test Cases (Backend)"
        },
        {
            "location": "/software-design/testing/#strategy",
            "text": "For the backend, we will have another instance of software running in a isolated docker container isolated with our production environment for unit testing. The unit test runs with pytest, a Python test framework, and it can run automatically. Since the backend essentially is providing RESTful API to the client, the way we test the API is by send HTTP request to our testing server to verify responses' status code and content. By doing so, we can easily implement new feature, refactor code, or make any other changes, then test it with existing test cases.",
            "title": "Strategy"
        },
        {
            "location": "/software-design/testing/#usage",
            "text": "The test cases is located under the  tests  folder, replace the access token with your own one.  $ make  test",
            "title": "Usage"
        },
        {
            "location": "/software-design/testing/#sample-console-output",
            "text": "==================================================== test session starts ====================================================\nplatform linux -- Python 3.5.2, pytest-3.0.6, py-1.4.32, pluggy-0.4.0\nrootdir: /home/app, inifile:\nplugins: ordering-0.4\ncollected 6 items\n\ntest/test_list.py .\ntest/test_article.py .\ntest/test_list.py ....\n\n================================================= 6 passed in 0.32 seconds ==================================================",
            "title": "Sample Console Output"
        },
        {
            "location": "/software-design/testing/#test-case-1",
            "text": "Item  Detail      Name  test_create_user_list    Purpose  Verify that user would be able to create a reading list.    Reference  US 2.1",
            "title": "Test Case 1"
        },
        {
            "location": "/software-design/testing/#test-case-2",
            "text": "Item  Detail      Name  test_get_user_all_lists    Purpose  Verify that user would be able to get his reading lists.    Reference  US 2.1",
            "title": "Test Case 2"
        },
        {
            "location": "/software-design/testing/#test-case-3",
            "text": "Item  Detail      Name  test_create_article_for_user    Purpose  Verify that user would be able to create an article under a personal list.    Reference  US 2.5   US 2.3   US 3.1",
            "title": "Test Case 3"
        },
        {
            "location": "/software-design/testing/#test-case-4",
            "text": "Item  Detail      Name  test_delete_article_from_list    Purpose  Verify that user would be able to delete an article under a personal list.    Reference  US 3.8",
            "title": "Test Case 4"
        },
        {
            "location": "/software-design/testing/#test-case-5",
            "text": "Item  Detail      Name  test_archive_user_list    Purpose  Verify that user would be able to archive a personal list.    Reference  US 3.9",
            "title": "Test Case 5"
        },
        {
            "location": "/software-design/testing/#test-case-6",
            "text": "Item  Detail      Name  test_retrieve_user_list    Purpose  Verify that user would be able to retrieve a archived personal list.    Reference  US 3.10",
            "title": "Test Case 6"
        },
        {
            "location": "/software-design/testing/#test-case-7",
            "text": "Item  Detail      Name  test_post_comment_to_article    Purpose  Verify that user can post comment to a article    Reference  US 3.2",
            "title": "Test Case 7"
        },
        {
            "location": "/software-design/testing/#test-case-8",
            "text": "Item  Detail      Name  test_create_group    Purpose  Verify that user can create a reading group    Reference  US 2.2",
            "title": "Test Case 8"
        },
        {
            "location": "/software-design/testing/#test-case-9",
            "text": "Item  Detail      Name  test_create_group_list    Purpose  Verify that user can create a list in a group    Reference  US 2.4",
            "title": "Test Case 9"
        },
        {
            "location": "/software-design/testing/#test-case-10",
            "text": "Item  Detail      Name  test_create_article_for_group    Purpose  Verify that user can create article in a group list    Reference  US 2.5",
            "title": "Test Case 10"
        },
        {
            "location": "/software-design/testing/#test-case-11",
            "text": "Item  Detail      Name  test_upvote_article    Purpose  Verify that user can up vote article    Reference  US 4.3",
            "title": "Test Case 11"
        },
        {
            "location": "/software-design/testing/#test-case-12",
            "text": "Item  Detail      Name  test_downvote_article    Purpose  Verify that user can down vote article    Reference  US 4.3",
            "title": "Test Case 12"
        },
        {
            "location": "/software-design/testing/#test-case-13",
            "text": "Item  Detail      Name  test_user_cannot_vote_twice    Purpose  Verify that user can vote twice    Reference  US 4.3",
            "title": "Test Case 13"
        },
        {
            "location": "/software-design/testing/#test-case-14",
            "text": "More tests will be added upon next release.",
            "title": "Test Case 14"
        },
        {
            "location": "/contribution-code/",
            "text": "Contribution Code\n\u00b6\n\n\nStyle Guide\n\u00b6\n\n\nPEP8 -- Style Guide for Python Code\n\n\nPull Request\n\u00b6\n\n\nAll changes to the code in the future should be submitted as a PR, and each PR should be reviewed and tested before being merge to the master branch.",
            "title": "Contribution Code"
        },
        {
            "location": "/contribution-code/#contribution-code",
            "text": "",
            "title": "Contribution Code"
        },
        {
            "location": "/contribution-code/#style-guide",
            "text": "PEP8 -- Style Guide for Python Code",
            "title": "Style Guide"
        },
        {
            "location": "/contribution-code/#pull-request",
            "text": "All changes to the code in the future should be submitted as a PR, and each PR should be reviewed and tested before being merge to the master branch.",
            "title": "Pull Request"
        },
        {
            "location": "/credits/",
            "text": "Credit\n\u00b6\n\n\nContributors\n\u00b6\n\n\n\n\nAaron(Hongyang) Liu\n\n\nMichael(Zichun) Lin\n\n\nMichael Rijlaarsdam\n\n\nStephen Larsen\n\n\n\n\nOpen Source Components\n\u00b6\n\n\n\n\n\n\nBackend\n\n\n\n\nElasticsearch\n\n\nFlask\n\n\n\n\n\n\n\n\nFront-end\n\n\n\n\nReactJS",
            "title": "Credit"
        },
        {
            "location": "/credits/#credit",
            "text": "",
            "title": "Credit"
        },
        {
            "location": "/credits/#contributors",
            "text": "Aaron(Hongyang) Liu  Michael(Zichun) Lin  Michael Rijlaarsdam  Stephen Larsen",
            "title": "Contributors"
        },
        {
            "location": "/credits/#open-source-components",
            "text": "Backend   Elasticsearch  Flask     Front-end   ReactJS",
            "title": "Open Source Components"
        }
    ]
}